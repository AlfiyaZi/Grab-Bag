#! /bin/python

import shlex, sys, os, time, subprocess, serial, sqlite3, random, json, multiprocessing, subprocess

threads = []
num_processes = 1

conn = sqlite3.connect('/var/www/barbot.sqlite')
c = conn.cursor()

cmd = "mplayer -idle -fixed-vo -framedrop -quiet -slave -autosync 0 -fs -zoom -x 760 -y 600 /home/nycr/Video/main.mov"
args = shlex.split(cmd)

slotMachine = '/dev/serial/by-id/usb-FTDI_TTL232R_FTE3G3MI-if00-port0'
barBot = '/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_A900acNt-if00-port0'
screen = '/dev/serial/by-id/usb-FTDI_TTL232R_FTDXPLJO-if00-port0'

vids = {1:40.58, 2:19.43, 3:19.43, 4:38.66, 5:31.28, 6:27.81, 7:35.20, 8:30.28, 9:32.90}

x = 1

def playVid():
    print "= = = = = Playing new Video = = = = ="
    
    
    #video = random.randint(1,9)
    
    video = c.execute("SELECT * FROM videos ORDER BY played asc")
    video = c.fetchone()
    
    print video
    result = c.execute("UPDATE videos SET played = %s WHERE id = %s" % (video[2]+1, video[0]))
    
    vidtime = video[3]
    video = video[1]
        
    print " = = = = = Playing Video %s = = = = =" % (video)
    #cmd = "loadfile /home/nycr/Video/vids/%s\n" % (video)
    #p.stdin.write(cmd)

    #log("Playing Video %s" % (video))

    #print "Sleeping for " + str(round(vidtime, -0)) + " seconds"
    
    #for i in range(int("%.0f" % round(vidtime, -0))):
    #    buffer=''
    #    buffer = buffer + ser.read(ser.inWaiting())
    #    if '\n' in buffer:
    #        break
    #    time.sleep(1)
    
    #print "Returning to Main Loop"
    #p.stdin.write("loadfile /home/nycr/Video/main.mov\n")
    
    #clearLCD()
    #randomLCD()
    
    spawnVideo(video, vidtime)
    
    
def makeDrink(args=None):
   
    drinkString = "DRINK ORDER "
    
##########################    
    # EXECUTE CUSTOM ORDER
    custom = c.execute("SELECT * FROM custom WHERE custom.done != 'True' ORDER BY id")
    custom = c.fetchone()
    print custom
    
    if custom is not None:
        print "CUSTOM ORDER: %s" % (custom[1])
        drinknum = custom[1]
        result = c.execute("UPDATE custom SET done='True' WHERE id = %s" % (custom[0]))
        
    else:
        count = c.execute("SELECT COUNT (*) from drinks")
        count = c.fetchone()
        
        #RANDOM DRINK
        drinknum = random.randint(1,count[0])
##########################
    
    result = c.execute("SELECT name FROM drinks WHERE id = %s" % (drinknum))
    drinkname = c.fetchone()[0]
    print "Making #" + str(drinknum) + " " + drinkname
    
    results = c.execute("SELECT * FROM drinkcommands LEFT OUTER JOIN ingrediants ON drinkcommands.ingrediant=ingrediants.id WHERE drinknum = %s ORDER BY id" % (drinknum))
    commands = c.fetchall()
    
    print commands

##########################
#            SEND COMMANDS
    oob = []
    for command in commands:
        if command[9] != "True":
            #print str(command[3]) + " " + command[4] + " " + command[7]
            drinkString += (str(command[2]) + ":" + str(command[3]) + " ")
        else:
            oob.append(str(command[3]) + " " + command[4] + " " + command[7])
            
     
    #print drinkString
    #serBot.write(drinkString + "\n")
    clearLCD()
    
    writeSpecials(str(drinkname), oob)    
    
    log("Mixing drink: " + drinkname + " (%s)"%(str(drinknum)))

def writeSpecials(drink, oob):
    line = 1
    x = 0
    lcd.write(chr(0xFE)+chr(0x48))
    
    lcd.write(drink)
    lcd.write(chr(10))
    print drink
    time.sleep(.5)
    
    
    if len(oob) > 2:
        lcd.write("\nADD:")
        time.sleep(1)
        
        clearLCD()
        time.sleep(.5)
        lcd.write(drink)
        lcd.write(chr(10))
        lcd.write("\n     ADD:")
        time.sleep(.5)
        clearLCD()
        time.sleep(.5)
        
        lcd.write(drink)
        lcd.write(chr(10))
        lcd.write("\n          ADD:")
        time.sleep(.5)
        clearLCD()
        time.sleep(.5)
        
        lcd.write(drink)
        lcd.write(chr(10))
        lcd.write("\n               ADD:")
        time.sleep(.5)
        clearLCD()
        time.sleep(.5)
        
        clearLCD()
        
        for inst in oob:
            lcd.write(str(inst))
            if x < len(oob)-1 and len(str(inst)) < 20:
                lcd.write(chr(10))
            x += 1
    elif len(oob) > 0:
        lcd.write("ADD: \n")
        for inst in oob:
            lcd.write(str(inst))

    time.sleep(1)

def log(text):
    sql = "insert into logs values (NULL, %s, '%s')" % (time.time(), text)
    c.execute(sql)
    conn.commit()
    c.close()

def randomLCD():
    sayings = {0:"\n      THIS IS\n    BAT COUNTRY!", 1:"\n      SPIN IT\n     TO WIN IT", 2:"\n     YOUR TURN\n      TO DRIVE", 3:"\n     I THINK I'M\n  GETTING THE FEAR", 4:"\n   COME ON\n        YOU FIEND"}
    x = random.randint(0, len(sayings)-1)
    clearLCD()
    lcd.write(sayings[x])
    
def clearLCD():
    lcd.write(chr(0xFE)+chr(0x58))       

def play():
    global last_received
    buffer = ''
    time.sleep(1)
    print " = = = = = Waiting for Serialz = = = = =" 
    
    randomLCD()
    
    while True:
        buffer = buffer + ser.read(ser.inWaiting())
        #print "BUFFER: ", buffer
        
        if '\n' in buffer:
            lines = buffer.split('\n')
            last_received = lines[-2]
            buffer = lines[-1]
            print " = = = = = CMD Received: " + last_received + " = = = = ="
            
            if "SPIN RESULT" in last_received:
                spinArgs = last_received.split(" ")
                print " = = WHEEL 1: " + spinArgs[2]
                print " = = WHEEL 2: " + spinArgs[3]
                print " = = WHEEL 3: " + spinArgs[4]
                drinkArgs = spinArgs[2:]
                
                makeDrink()
                
                playVid()
            
        time.sleep(.1)


def spawnVideo( video, time ):
    p = multiprocessing.Process(target=playVideo,args=[video, time])
    p.start()
    print p, "Is Activated: ", p.is_alive()
    threads.append(p)
        
def killThreads( self ):
    for thread in threads:
        if not thread.is_alive():
            threads.remove(thread)

def playVideo(video, vidtime):
    cmd = "loadfile /home/nycr/Video/vids/%s\n" % (video)
    p.stdin.write(cmd)
    time.sleep(int(vidtime))

    print "Returning to Main Loop"
    p.stdin.write("loadfile /home/nycr/Video/main.mov\n")
    
    clearLCD()
    randomLCD()

if __name__ == '__main__':
    print " = = = = = Starting up... = = = = ="
    
    try:
        lcd = serial.Serial(screen, 19200)
        lcd.open()
        
        clearLCD()
        lcd.write("\n BarBot Operational")

    except:
        print "Could not open LCD on " + screen
        log("Could not open LCD on " + screen)
        sys.exit(-1)
    
    
    try:
        serBot = serial.Serial(barBot, 9600, timeout=.1)
        serBot.open()
    except:
        print "Could not open BarBot on " + barBot
        log("Could not open BarBot on " + barBot)
        sys.exit(-1)
    
    
    try:
        ser = serial.Serial(slotMachine, 9600, timeout=.1)
        ser.open()
    except:
        print "Could not open SlotMachine on " + slotMachine
        log("Could not open Slot Machine on " + slotMachine)
        sys.exit(-1)
        
    if ser.isOpen() is True:    
        p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        time.sleep(2)
        ser.flushInput()
        log("Starting up...")
        play()
        
    else:
        print "Could not open " + slotMachine
        log("Could not open" + slotMachine)
        sys.exit(-1)

